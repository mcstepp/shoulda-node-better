Node Notes:

Who is uses NodeJs in production on the back-end?
=> Walmart, Netflix, Uber

What is NodeJs?
=> Javascript run-time that uses the V8 engine
=> Uses event-driven, non-blocking language I/O
=> NodeJs's package ecosystem, npm, is the largest in the world for open source libraries

What is the V8 engine?
=> Open-source Javascript engine written in C++
=> Takes javascript code and compiles it to machine code
=> Works inside of Nodejs, and used in Chrome browser

What is I/O?
=> Input/Output
=> Application does all the time
=> Communcation from node application to the internet of things
=> Database read/write
=> Changing files on your file system
=> Making HTTP request on separate web server, like Google API for fetching a map for the user's current location. 

What is non-blocking I/O?
=> While one user is doing all sorts of things, it doesn't prevent another user from doing things. 

What is blocking I/O? // TODO: fill this in
=> Events are queued up and execute after the previous one is finished.

1. Node => Javascript
	a. global => window
	b. process => document

2. Blocking Vs. Non-blocking
	a. Each request takes three seconds
	b. non-blocking => running at the same time

```
/*
* blocking.js
* Takes over six seconds to complete
*
*/
var getUserSync = require('./getUserSync');

var user1 = getUserSync('123');
// waiting on user1 =>long request I/O
console.log('user1', user1);
// printing user1 => short, non-I/O

var user2 = getUserSync('321');
console.log('user2', user2);

var sum = 1 + 2;
console.log('The sum is ' + sum);

```

```
/*
* non-blocking.js
* Takes just over 3 seconds to complete
*
*/
var getUser = require('./getUser');

getUser('123', function (user1) {
console.log('user1', user1);
});

getUser('321', function (user2) {
console.log('user2', user2);
});

var sum = 1 + 2;
console.log('The sum is ' + sum);

```

### Creating a Note Application

Goal of App => Create a file and append to it
Get Packages => nodejs.org/api
Package Details => File System, OS

1. Starting the app
    a. Every app begins with the `app.js` file, the only file you execute
    b. Load packages using Require => assign to const
        i. fs.appendFile => if file doesn't exist, it creates it.
        ii. os.UserInfo => varies between OS, but `username` should always be available
2. Got a Warning, Now What?
    a. DeprecationWarning: Calling an asynchronous function without callback is deprecated.
    b. Option 1 => adding callback as third argument to `appendFile`
    c. Option 2 => call `appendFileSync` => asynchronous method.
3. Third-Party Modules
    a. npm => package manager
        i. `npm init` => package.json info
        ii. `npm install <package name> --save` => saves it as dependency of project
        iii. `npm install` => installs all the dependencies

// DeprecationWarning: Calling an asynchronous function without callback is deprecated.
`fs.appendFile('greetings.txt', 'Hello world!');`

// option 1
```
fs.appendFile('greetings.txt', 'Hello ' + user.username + '!', function (err){
    if (err) {
        console.log('Unable to write to file');
    }
});
```

// option 2
```
fs.appendFileSync('greetings.txt', 'Hello World!');
```

### General
1. Arrow functions
=> Fine for anonymous functions
=> they don't bind to `this` or the `arguments` array
2. Automatically Restart app on save
=> Nodemon; install cmdline utility
